#!/usr/bin/env python3
import rospy
import numpy as np
from std_msgs.msg import Float64
from sensor_msgs.msg import JointState

from mpcSolver import MpcSolver


class MpcNode:

    def __init__(self):
        self._mpcSolver = MpcSolver()
        rospy.init_node("mpc_node", anonymous=True)
        self._rate = rospy.Rate(10)
        self._pubs = [rospy.Publisher("panda_torque_controller_joint" + str(i) + "/command", Float64, queue_size=10) for i in range(1, 8)]
        self._js_sub = rospy.Subscriber('/joint_states', JointState, self.js_cb)
        self._js_des_sub = rospy.Subscriber('/mpc_goal', JointState, self.js_des_cb)
        self._pos_des = np.array([0.0, -np.pi/4, 0.0, -3.0 * np.pi/4.0, 0.0, np.pi/2.0, np.pi/4.0])
        self._pos = np.zeros(7)
        self._vel = np.zeros(7)
        self._pubMsg = Float64()

    def js_cb(self, data):
        for i in range(7):
            self._pos[i] = data.position[i]
            self._vel[i] = data.velocity[i]

    def js_des_cb(self, data):
        for i in range(7):
            self._pos_des[i] = data.position[i]

    def publish(self, action):
        for i in range(7):
            self._pubMsg.data = 1 * action[i]
            self._pubs[i].publish(self._pubMsg)

    def run(self):
        while not rospy.is_shutdown():
            ob = np.concatenate((self._pos, self._vel))
            dist = np.linalg.norm(ob[0:7] - self._pos_des)
            print("distance to target : ", dist)
            self._mpcSolver.setGoal(self._pos_des)
            action, info = self._mpcSolver.solve(ob)
            self.publish(action)
            #self._rate.sleep()


if __name__ == "__main__":
    mpcnode = MpcNode()
    try:
        mpcnode.run()
    except rospy.ROSInterruptException:
        pass



